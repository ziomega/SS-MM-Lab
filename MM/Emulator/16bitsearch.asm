ASSUME DS:DATA, CS:CODE

DATA SEGMENT
    ARR     DW 10 DUP(?)
    COUNT   DW ?
    KEY     DW ?
    POS     DW ?
    MSG1    DB 0AH,0DH,"ENTER NUMBER OF ELEMENTS (1-9): $"
    MSG2    DB 0AH,0DH,"ENTER HEXADECIMAL NUMBER (4 DIGITS): $"
    MSG3    DB 0AH,0DH,"ENTER SEARCH KEY (4 DIGITS): $"
    MSG4    DB 0AH,0DH,"ELEMENT FOUND AT POSITION: $"
    MSG5    DB 0AH,0DH,"ELEMENT NOT FOUND$"
    SPACE   DB " $"
    NEWLINE DB 0AH,0DH,"$"
DATA ENDS

CODE SEGMENT
START:
    MOV AX, DATA
    MOV DS, AX
    
    LEA DX, MSG1
    MOV AH, 09H
    INT 21H
    
    MOV AH, 01H
    INT 21H
    SUB AL, 30H
    MOV BL, AL
    XOR BH, BH
    MOV COUNT, BX
    
    MOV CX, COUNT
    LEA SI, ARR
    
INPUT_LOOP:
    PUSH CX
    LEA DX, MSG2
    MOV AH, 09H
    INT 21H
    CALL READ_HEX
    MOV [SI], BX
    ADD SI, 2
    POP CX
    LOOP INPUT_LOOP
    
    LEA DX, MSG3
    MOV AH, 09H
    INT 21H
    CALL READ_HEX
    MOV KEY, BX
    
    MOV CX, COUNT
    LEA SI, ARR
    MOV AX, KEY
    MOV BX, 1
    
SEARCH_LOOP:
    CMP AX, [SI]
    JE FOUND
    ADD SI, 2
    INC BX
    LOOP SEARCH_LOOP
    
    LEA DX, MSG5
    MOV AH, 09H
    INT 21H
    JMP EXIT_PROG
    
FOUND:
    MOV POS, BX
    LEA DX, MSG4
    MOV AH, 09H
    INT 21H
    MOV AX, POS
    ADD AL, 30H
    MOV DL, AL
    MOV AH, 02H
    INT 21H
    
EXIT_PROG:
    MOV AH, 4CH
    INT 21H

READ_HEX PROC
    PUSH CX
    PUSH AX
    MOV BX, 0
    MOV CX, 4
    
READ_DIGIT:
    MOV AH, 01H
    INT 21H
    CMP AL, '9'
    JBE NUMERIC
    CMP AL, 'F'
    JBE UPPERCASE
    SUB AL, 20H
UPPERCASE:
    SUB AL, 37H
    JMP SHIFT_IN
NUMERIC:
    SUB AL, 30H
SHIFT_IN:
    SHL BX, 4
    OR BL, AL
    LOOP READ_DIGIT
    POP AX
    POP CX
    RET
READ_HEX ENDP

CODE ENDS
END START

